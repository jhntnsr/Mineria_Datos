# Proyecto: Matrimonios y Divorcios  
**Autor:** Jhonatan Simon  
**ID:** 999010164  

---

## LibrerÃ­as utilizadas

```r
library(haven)   # Para leer archivos .sav
library(readxl)  # Para leer archivos .xlsx
library(dplyr)   # Para manipulaciÃ³n de datos
```

---

## ðŸ”§ Funciones auxiliares

### Limpiar nombres de columnas

```r
limpiar_nombres <- function(df) {
  names(df) <- tolower(names(df))
  names(df) <- gsub("[^a-z0-9]", "_", names(df))
  return(df)
}
```

### Convertir variables `labelled` a `numeric` o `character`

```r
convertir_labelled <- function(df) {
  df[] <- lapply(df, function(x) {
    if ("labelled" %in% class(x)) {
      if (is.numeric(x)) as.numeric(x)
      else as.character(x)
    } else x
  })
  df
}
```

---

## Carga de datos

### Crear lista de dataframes para divorcios y matrimonios

```r
aÃ±os <- 2009:2024
```

#### Divorcios

```r
divorcios_list <- lapply(aÃ±os, function(a) {
  file_ext <- if (a %in% 2023:2024) ".xlsx" else ".sav"
  file_path <- paste0("D:/Documentos/Maestria/Introduccion a la Mineria de Datos/Proyecto_1/Divorcios_", a, file_ext)

  df <- if (file_ext == ".sav") read_sav(file_path) else read_excel(file_path)
  df <- limpiar_nombres(df)
  df <- convertir_labelled(df)
  return(df)
})
```

#### Matrimonios

```r
matrimonios_list <- lapply(aÃ±os, function(a) {
  file_ext <- if (a %in% 2023:2024) ".xlsx" else ".sav"
  file_path <- paste0("D:/Documentos/Maestria/Introduccion a la Mineria de Datos/Proyecto_1/matrimonios_", a, file_ext)

  df <- if (file_ext == ".sav") read_sav(file_path) else read_excel(file_path)
  df <- limpiar_nombres(df)
  df <- convertir_labelled(df)
  return(df)
})
```

---

## Procesamiento de datos

### Identificar columnas comunes

```r
col_comunes_div <- Reduce(intersect, lapply(divorcios_list, names))
col_comunes_mat <- Reduce(intersect, lapply(matrimonios_list, names))
```

### Filtrar solo columnas comunes

```r
divorcios_list <- lapply(divorcios_list, function(df) df[, col_comunes_div, drop = FALSE])
matrimonios_list <- lapply(matrimonios_list, function(df) df[, col_comunes_mat, drop = FALSE])
```

### Combinar todos los aÃ±os en un solo dataframe

```r
d_2009_2024 <- bind_rows(divorcios_list)
m_2009_2024 <- bind_rows(matrimonios_list)
```

---

## VerificaciÃ³n de resultados

```r
dim(d_2009_2024)
dim(m_2009_2024)
names(d_2009_2024)
names(m_2009_2024)

data.frame(1:ncol(d_2009_2024), colnames(d_2009_2024))
data.frame(1:ncol(m_2009_2024), colnames(m_2009_2024))
```

---

## Diccionario de columnas comunes (2009â€“2024)

### Divorcios (`d_2009_2024`)

Columna | Significado
--------|-----------------------------
depreg  | Departamento de registro
mupreg  | Municipio de registro
mesreg  | Mes de registro
diaocu  | DÃ­a de ocurrencia
mesocu  | Mes de ocurrencia
depocu  | Departamento de ocurrencia
mupocu  | Municipio de ocurrencia
edadhom | Edad del hombre
edadmuj | Edad de la mujer
nachom  | Nacionalidad del hombre
nacmuj  | Nacionalidad de la mujer

### Matrimonios (`m_2009_2024`)

Columna | Significado
--------|-----------------------------
depreg  | Departamento de registro
mupreg  | Municipalidad de registro
mesreg  | Mes de registro
a_oreg  | AÃ±o de registro
clauni  | Clase de uniÃ³n
edadhom | Edad del hombre
edadmuj | Edad de la mujer
nachom  | Nacionalidad del hombre
nacmuj  | Nacionalidad de la mujer
depocu  | Departamento de ocurrencia
mupocu  | Municipio de ocurrencia
mesocu  | Mes de ocurrencia

---

## Reglas de AsociaciÃ³n (Apriori)

### Divorcios

```r
library(arules)
regla <- apriori(d_2009_2024, parameter = list(support = 0.2, confidence = 0.5))
inspect(regla[0:200])
```

### Matrimonios

```r
regla_m <- apriori(m_2009_2024, parameter = list(support = 0.2, confidence = 0.5))
inspect(regla_m[0:432])
```
